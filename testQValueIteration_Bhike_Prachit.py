import sys
sys.path.append('../src/')

import unittest
from ddt import ddt, data, unpack
import qValueIteration as targetCode #change to file name


@ddt
class TestValueIteration(unittest.TestCase): 

    
    def getSPrimeRDistributionFull(s, action):

        transitionTable = {(0, 0): {(0, 1): {(0, 0): 0.09999999999999998, (0, 1): 0.8, (0, 2): 0, (1, 0): 0.09999999999999998, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0}, (0, -1): {(0, 0): 0.9, (0, 1): 0, (0, 2): 0, (1, 0): 0.09999999999999998, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0}, (1, 0): {(0, 0): 0.09999999999999998, (0, 1): 0.09999999999999998, (0, 2): 0, (1, 0): 0.8, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0}, (-1, 0): {(0, 0): 0.9, (0, 1): 0.09999999999999998, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0}}, (0, 1): {(0, 1): {(0, 0): 0, (0, 1): 0.19999999999999996, (0, 2): 0.8, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0}, (0, -1): {(0, 0): 0.8, (0, 1): 0.19999999999999996, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0}, (1, 0): {(0, 0): 0.09999999999999998, (0, 1): 0.8, (0, 2): 0.09999999999999998, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0}, (-1, 0): {(0, 0): 0.09999999999999998, (0, 1): 0.8, (0, 2): 0.09999999999999998, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0}}, (0, 2): {(0, 1): {(0, 0): 0, (0, 1): 0, (0, 2): 0.9, (1, 0): 0, (1, 2): 0.09999999999999998, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0}, (0, -1): {(0, 0): 0, (0, 1): 0.8, (0, 2): 0.09999999999999998, (1, 0): 0, (1, 2): 0.09999999999999998, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0}, (1, 0): {(0, 0): 0, (0, 1): 0.09999999999999998, (0, 2): 0.09999999999999998, (1, 0): 0, (1, 2): 0.8, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0}, (-1, 0): {(0, 0): 0, (0, 1): 0.09999999999999998, (0, 2): 0.9, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0}}, (1, 0): {(0, 1): {(0, 0): 0.09999999999999998, (0, 1): 0, (0, 2): 0, (1, 0): 0.8, (1, 2): 0, (2, 0): 0.09999999999999998, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0}, (0, -1): {(0, 0): 0.09999999999999998, (0, 1): 0, (0, 2): 0, (1, 0): 0.8, (1, 2): 0, (2, 0): 0.09999999999999998, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0}, (1, 0): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0.19999999999999996, (1, 2): 0, (2, 0): 0.8, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0}, (-1, 0): {(0, 0): 0.8, (0, 1): 0, (0, 2): 0, (1, 0): 0.19999999999999996, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0}}, (1, 2): {(0, 1): {(0, 0): 0, (0, 1): 0, (0, 2): 0.09999999999999998, (1, 0): 0, (1, 2): 0.8, (2, 0): 0, (2, 1): 0, (2, 2): 0.09999999999999998, (3, 0): 0, (3, 1): 0, (3, 2): 0}, (0, -1): {(0, 0): 0, (0, 1): 0, (0, 2): 0.09999999999999998, (1, 0): 0, (1, 2): 0.8, (2, 0): 0, (2, 1): 0, (2, 2): 0.09999999999999998, (3, 0): 0, (3, 1): 0, (3, 2): 0}, (1, 0): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0.19999999999999996, (2, 0): 0, (2, 1): 0, (2, 2): 0.8, (3, 0): 0, (3, 1): 0, (3, 2): 0}, (-1, 0): {(0, 0): 0, (0, 1): 0, (0, 2): 0.8, (1, 0): 0, (1, 2): 0.19999999999999996, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0}}, (2, 0): {(0, 1): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0.09999999999999998, (1, 2): 0, (2, 0): 0, (2, 1): 0.8, (2, 2): 0, (3, 0): 0.09999999999999998, (3, 1): 0, (3, 2): 0}, (0, -1): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0.09999999999999998, (1, 2): 0, (2, 0): 0.8, (2, 1): 0, (2, 2): 0, (3, 0): 0.09999999999999998, (3, 1): 0, (3, 2): 0}, (1, 0): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0.09999999999999998, (2, 1): 0.09999999999999998, (2, 2): 0, (3, 0): 0.8, (3, 1): 0, (3, 2): 0}, (-1, 0): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0.8, (1, 2): 0, (2, 0): 0.09999999999999998, (2, 1): 0.09999999999999998, (2, 2): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0}}, (2, 1): {(0, 1): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0.09999999999999998, (2, 2): 0.8, (3, 0): 0, (3, 1): 0.09999999999999998, (3, 2): 0}, (0, -1): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0.8, (2, 1): 0.09999999999999998, (2, 2): 0, (3, 0): 0, (3, 1): 0.09999999999999998, (3, 2): 0}, (1, 0): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0.09999999999999998, (2, 1): 0, (2, 2): 0.09999999999999998, (3, 0): 0, (3, 1): 0.8, (3, 2): 0}, (-1, 0): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0.09999999999999998, (2, 1): 0.8, (2, 2): 0.09999999999999998, (3, 0): 0, (3, 1): 0, (3, 2): 0}}, (2, 2): {(0, 1): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0.09999999999999998, (2, 0): 0, (2, 1): 0, (2, 2): 0.8, (3, 0): 0, (3, 1): 0, (3, 2): 0.09999999999999998}, (0, -1): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0.09999999999999998, (2, 0): 0, (2, 1): 0.8, (2, 2): 0, (3, 0): 0, (3, 1): 0, (3, 2): 0.09999999999999998}, (1, 0): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0.09999999999999998, (2, 2): 0.09999999999999998, (3, 0): 0, (3, 1): 0, (3, 2): 0.8}, (-1, 0): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0.8, (2, 0): 0, (2, 1): 0.09999999999999998, (2, 2): 0.09999999999999998, (3, 0): 0, (3, 1): 0, (3, 2): 0}}, (3, 0): {(0, 1): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 1.0, (3, 1): 0, (3, 2): 0}, (0, -1): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 1.0, (3, 1): 0, (3, 2): 0}, (1, 0): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 1.0, (3, 1): 0, (3, 2): 0}, (-1, 0): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 1.0, (3, 1): 0, (3, 2): 0}}, (3, 1): {(0, 1): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 1.0, (3, 2): 0}, (0, -1): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 1.0, (3, 2): 0}, (1, 0): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 1.0, (3, 2): 0}, (-1, 0): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 1.0, (3, 2): 0}}, (3, 2): {(0, 1): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0.09999999999999998, (3, 0): 0, (3, 1): 0, (3, 2): 0.9}, (0, -1): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0.09999999999999998, (3, 0): 0, (3, 1): 0.8, (3, 2): 0.09999999999999998}, (1, 0): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0, (3, 0): 0, (3, 1): 0.09999999999999998, (3, 2): 0.9}, (-1, 0): {(0, 0): 0, (0, 1): 0, (0, 2): 0, (1, 0): 0, (1, 2): 0, (2, 0): 0, (2, 1): 0, (2, 2): 0.8, (3, 0): 0, (3, 1): 0.09999999999999998, (3, 2): 0.09999999999999998}}}
        rewardTable = {(0, 0): {(0, 1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (0, -1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (-1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}}, (0, 1): {(0, 1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (0, -1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (-1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}}, (0, 2): {(0, 1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (0, -1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (-1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}}, (1, 0): {(0, 1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (0, -1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (-1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}}, (1, 2): {(0, 1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (0, -1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (-1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}}, (2, 0): {(0, 1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (0, -1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (-1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}}, (2, 1): {(0, 1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (0, -1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (-1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}}, (2, 2): {(0, 1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (0, -1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (-1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}}, (3, 0): {(0, 1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 0, (3, 1): -1, (3, 2): -0.04}, (0, -1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 0, (3, 1): -1, (3, 2): -0.04}, (1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 0, (3, 1): -1, (3, 2): -0.04}, (-1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 0, (3, 1): -1, (3, 2): -0.04}}, (3, 1): {(0, 1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): 0, (3, 2): -0.04}, (0, -1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): 0, (3, 2): -0.04}, (1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): 0, (3, 2): -0.04}, (-1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): 0, (3, 2): -0.04}}, (3, 2): {(0, 1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (0, -1): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}, (-1, 0): {(0, 0): -0.04, (0, 1): -0.04, (0, 2): -0.04, (1, 0): -0.04, (1, 2): -0.04, (2, 0): -0.04, (2, 1): -0.04, (2, 2): -0.04, (3, 0): 1, (3, 1): -1, (3, 2): -0.04}}}
        
        reward=lambda sPrime: rewardTable[s][action][sPrime]
        p=lambda sPrime: transitionTable[s][action][sPrime]
        sPrimeRDistribution={(sPrime, reward(sPrime)): p(sPrime) for sPrime in transitionTable[s][action].keys()}
        return sPrimeRDistribution

    @data(((3, 2),(1, 0),
    {(0, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (0, 1): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (0, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (1, 0): {(0, 1): 0, (0, -1): 0, 
    (1, 0): 0, (-1, 0): 0}, (1, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (2, 0): {(0, 1): 0.06399999999999997, (0, -1): 0.10495999999999997, (1, 0): 0.8003968, (-1, 0): 0.024031743999999983}, (2, 1): {(0, 1): 0, (0, -1): 0.376253952, (1, 0): 0, (-1, 0): 0.26483427328000003}, (2, 2): {(0, 1): 0, (0, -1): 0.20080252928000003, (1, 0): 0.006164518502399997, (-1, 0): 0.006164518502399996}, (3, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (3, 1): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (3, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}},
    getSPrimeRDistributionFull,
    0.8,
    -0.13599999999999998),
    ((2, 2),(-1, 0),
    {(0, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (0, 1): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (0, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (1, 0): {(0, 1): 0, (0, -1): 0, 
    (1, 0): 0, (-1, 0): 0}, (1, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (2, 0): {(0, 1): 0.06399999999999997, (0, -1): 0.10495999999999997, (1, 0): 0.8003968, (-1, 0): 0.024031743999999983}, (2, 1): {(0, 1): 0, (0, -1): 0.376253952, (1, 0): 0, (-1, 0): 0.26483427328000003}, (2, 2): {(0, 1): 0, (0, -1): 0.20080252928000003, (1, 0): 0.006164518502399997, (-1, 0): 0}, (3, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (3, 1): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (3, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}},
    getSPrimeRDistributionFull,
    0.8,
    0.006164518502399996)
    )
    @unpack
    def test_updateQ(self, s, a, Q, getSPrimeRDistribution, gamma, expectedResult):

        calculatedResult=targetCode.updateQFull(s, a, Q, getSPrimeRDistribution, gamma)

        self.assertAlmostEqual(calculatedResult, expectedResult,places = 4)



    @data(({(0, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (0, 1): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (0, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (1, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (1, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (2, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (2, 1): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (2, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (3, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (3, 1): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (3, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}},
    lambda s, a, Q: Q,
    {(0, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (0, 1): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (0, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (1, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (1, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (2, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (2, 1): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (2, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (3, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (3, 1): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (3, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}} 
    ),
    ({(0, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (0, 1): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (0, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (1, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (1, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (2, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (2, 1): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (2, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (3, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (3, 1): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (3, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}},
    lambda s, a, Q: Q,
    {(0, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (0, 1): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (0, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (1, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (1, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (2, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (2, 1): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (2, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (3, 0): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (3, 1): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}, (3, 2): {(0, 1): 0, (0, -1): 0, (1, 0): 0, (-1, 0): 0}} 
    ))
    @unpack
    def test_valueiteration(self, Q, updateQ, expectedResult):

        stateSpace = [(0, 0), (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2), (3, 0), (3, 1), (3, 2)]
        actionSpace = [(0, 1), (0, -1), (1, 0), (-1, 0)]
        convergenceTolerance = 0.0000001
        # calculatedResult = targetCode.qValueIteration(Q, updateQ, stateSpace, actionSpace, convergenceTolerance)
        # calculatedResult_sum = sum(calculatedResult.values())
        # expected_sum = sum(expectedResult.values())
        # self.assertEqual(calculatedResult_sum, expected_sum)	


    @data(({(0, 1): 0.06399999999999997, (0, -1): 0.10495999999999997, (1, 0): 0.8003968, (-1, 0): 0.024031743999999983},
        0.0001,
        {(1, 0): 1}
    ),
    ({(0, 1): 0.003, (0, -1): 0.00305, (1, 0): 0, (-1, 0): 0},
        0.0001,
        {(0, 1): 0.5, (0, -1):0.5}
    )
    )
    @unpack
    def test_policy_update(self, Q, roundingTolerance, expectedResult):

        calculatedResult = sum(targetCode.getPolicyFull(Q, roundingTolerance).values())/len(targetCode.getPolicyFull(Q, roundingTolerance))
        self.assertAlmostEqual(calculatedResult, sum(expectedResult.values())/len(expectedResult), places = 4)	


    def tearDown(self):
       pass
 
if __name__ == '__main__':
    unittest.main(verbosity=2)